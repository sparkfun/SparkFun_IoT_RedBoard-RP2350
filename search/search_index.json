{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"arduino/","title":"Arduino","text":"<p>Attention</p> <p>If this is your first time using Arduino, please read through our tutorial on installing the Arduino IDE. If you have not installed an Arduino library before, we recommend you check out our installation guide.</p>"},{"location":"arduino/#arduino-pico-boards","title":"Arduino-Pico Boards","text":"<p>The SparkFun IoT RedBoard - RP2350 is supported on the Arduino IDE in the Arduino-Pico boards package. To install the package, open the Preferences menu by navigating to File &gt; Preferences. Look at the bottom of the Preferences menu for \"Additional boards manager URLS\" and then copy this JSON link into that field:</p> <p><code>     https://github.com/earlephilhower/arduino-pico/releases/download/global/package_rp2040_index.json </code></p> <p>Click \"OK\" to close this menu then navigate to the Boards Manager tool and search for \"pico\" and download the latest release of \"Raspberry Pi Pico\" (4.2.1 or later).</p> <p></p> <p>For more information on using the Arduino-Pico boards package, check out their documentation page. Head over to the Quick Start guide for an Arduino example demonstrating how to connect to a WiFi network, download data from a site and control the RGB LED.</p>"},{"location":"hardware_overview/","title":"Hardware Overview","text":"<p>This document gives a detailed overview of the RedBoard IoT - RP2350 and all components present on the board.</p>"},{"location":"hardware_overview/#iot-redboard-rp2350-overview","title":"IoT RedBoard - RP2350 Overview","text":"<p>The IoT RedBoard - RP2350 is packed with hardware aimed at helping users get the most out of the RP2350. This includes multiple power inputs like USB-C and a 2-pin JST connector, Qwiic connector, standard R3 female headers, several status LEDs and also a couple specialized headers for the RP2350's high-speed transmit (HSTX) pins and its debug pins. The photo below highlights most of the major components on this board that we'll cover in this Hardware Overview.</p> <p> </p>"},{"location":"hardware_overview/#rp2350-microcontroller","title":"RP2350 Microcontroller","text":"<p>The RP2350 from Raspberry Pi packs a whole lot of computing punch in a tiny package. The RP2350 is a unique dual-core microcontroller that has four internal processors (two Arm Cortex-M33 and two Hazard3 RISC-V processors @150 MHz), though you can only select any two of these four to run at the same time. </p> <p>This internal configuration allows users to customize the chip to use a pair their preferred architecture (ARM or Hazard3) or to use one of each! The RP2350 includes 520kB of on-chip SRAM in ten independent banks, 8kB of one-time-programmable (OTP) storage and this board also includes PSRAM connected to the chip's QSPI bus. The RP2350 also has a bevy of security features including optional boot signing with protected OTP storage for the boot decryption key, global bus filtering (based on either Arm or RISC-V security and privilege levels) and more.</p> <p>The RedBoard IoT - RP2350 uses the \"A\" version of the microcontroller which has 30 5V-tolerant GPIO with 4 analog inputs and also includes the following peripheral options:</p> <ul> <li>2x UART</li> <li>2x SPI</li> <li>2x I<sup>2</sup>C</li> <li>24 PWM</li> <li>USB 1.1 Controller</li> <li>12 PIO State Machines</li> <li>1x High-Speed Transmit (HSTX) Peripheral for DVI/DSI support</li> </ul> <p>For complete information on the RP2350, refer to the datasheet.</p>"},{"location":"hardware_overview/#memory","title":"Memory","text":""},{"location":"hardware_overview/#w25q128-flash","title":"W25Q128 Flash","text":"<p>The W25Q128 Flash IC adds 16MB of storage space on the RedBoard IoT. This connects to the RP2350 over QSPI.</p>"},{"location":"hardware_overview/#psram","title":"PSRAM","text":"<p>The board also includes an 8MB PSRAM IC for dynamic storage. This also connects to the RP2350 over QSPI. PSRAM support is included in the SparkFun MicroPython \"early release\" firmware found later in this guide and on the product page, but is not natively supported in the Pico SDK as of release. Refer to the Arducam Demo section of this guide for information on how to enable and set up PSRAM using the Pico SDK.</p> <p>For a complete overview of the PSRAM IC, refer to the datasheet.</p>"},{"location":"hardware_overview/#sd-card-slot","title":"\u00b5SD Card Slot","text":"<p>The board has a \u00b5SD card slot that connects to the RP2350's SPI bus for even more storage. Make sure the SPI are LOW when the \u00b5SD card is unpowered. Setting these pins HIGH can damage the GPIO pins. The connector is a fricton-fit connector so no \"clicking\" and \"unclicking\" is necessary. Just plug it in nice and snug. </p>"},{"location":"hardware_overview/#raspberry-pi-rm2-radio-module","title":"Raspberry Pi RM2 Radio Module","text":"<p>The Raspberry Pi RM2 (radio module 2) is built around the same chipset as the previous Raspberry Pi radio module found on boards like the Pico W. The module features both WiFi 4 (802.11n) 2.4GHz and  Bluetooth<sup>\u2122</sup> 5.2 with support for Low Energy (Central and Peripheral) and Classic. </p> <p>The RM2 communicates with the RP2350 over SPI and we've designed this board to use the same pins for the radio module as official Raspberry Pi boards (Pico W and Pico 2 W), making it easy to use the radio module without having to adjust anything from those development boards. The RedBoard IoT routes the module's GPIO0 pin to a blue STAT LED to allow users to create a visual indicator of the status of the module. We added this STAT LED connected to the same pin used on the Pico W to make code for that compatible with the RedBoard IoT - RP2350.</p>"},{"location":"hardware_overview/#power","title":"Power","text":"<p>The RedBoard IoT - RP2350 includes several options for powering including USB-C, LiPo battery with on-board battery charging and monitoring circuits as well as direct power inputs.</p>"},{"location":"hardware_overview/#usb-c","title":"USB-C","text":"<p>The USB-C connector on the board acts as the primary serial interface for the RP2350 as well as a power input. The 5V USB input voltage is regulated down to 3.3V through a voltage regulator with a max current of 500mA@3.3V.</p>"},{"location":"hardware_overview/#barrel-jack","title":"Barrel Jack","text":"<p>The barrel jack connector on this board accepts a supply voltage between 7V and 15V. This supply voltage includes a 16V/2.5A/5A fuse.</p>"},{"location":"hardware_overview/#lipo-power-charging","title":"LiPo Power &amp; Charging","text":"<p>The IoT RedBoard - RP2350 can also be powered with a single cell lithium battery through a 2-pin JST connector. The board also includes a MCP73831 LiPo charge IC as part of a charging circuit for a connected battery. The charge rate is set to 455mA and is powered either via USB, barrel jack or dedicated pin. </p> <p>It also has a MAX17048 battery fuel gauge to monitor a connected battery's voltage level. The fuel gauge communicates with the RP2350 over I<sup>2</sup>C.</p>"},{"location":"hardware_overview/#pinout","title":"Pinout","text":""},{"location":"hardware_overview/#r3-footprint-female-headers","title":"R3 Footprint Female Headers","text":""},{"location":"hardware_overview/#hstx-connector","title":"HSTX Connector","text":""},{"location":"hardware_overview/#rp2350-debug-connector","title":"RP2350 Debug Connector","text":"<p>We've also included a dedicated 1mm 3-pin connector tied to the RP2350's debug pins (SWDIO, SWCK &amp; Ground). Users can plug a debug cable (link needed - ML) to this connector. These pins are also connected to a 0.1\"-spaced PTH header right next to it for those who prefer a different connection type. </p>"},{"location":"hardware_overview/#leds","title":"LEDs","text":"<p>This board has four LEDs labeled STAT/25, CHG, WRL, PWR and RGB/IO3.</p> <p>Photo highlighting LEDs - ML</p> <p>The list below outlines the color and functionality of the LEDs on the IoT RedBoard - RP235.</p> <ul> <li>STAT/25 - Blue LED tied to the RP2350's IO25. User-programmable status LED. </li> <li>CHG - Yellow LED connects to the MCP73831 LiPo charge IC to indicate when an attached battery is being charged.</li> <li>WRL - Blue LED tied to IO0 on the RM2. User-programmable status LED.</li> <li>PWR - Red LED tied to 3.3V power circuit.</li> <li>RGB/IO3 - WS2812 RGB LED tied to the RP2350's IO3. User-progammable RGB LED.</li> </ul>"},{"location":"hardware_overview/#buttons","title":"Buttons","text":"<p>There are three push buttons on the board labeled RESET, USER/36 and BOOT.</p> <p>Photo highlighting buttons - ML</p> <p>The RESET button connects to the RP2350's RUN pin and resets the RP2350 when pressed. The USER/36 button connects to IO36 on the RP2350 and can act as a physical input to trigger an event in code. The BOOT button </p>"},{"location":"hardware_overview/#solder-jumpers","title":"Solder Jumpers","text":"<p>The IoT RedBoard - RP2350 has five solder jumpers labeled PWR, LP, SHLD, I2C and BYP. </p> <p>Photo highlighting solder jumpers - ML</p> <p>The list below outlines the solder jumpers functionality, default state and any notes about their behavior.</p> <ul> <li>PWR - Completes the Power LED circuit. CLOSED by default. Open to disable the power LED to help conserve power.</li> <li>LP - Pulls the RP9080 3.3V regulator's enable (EN) pin HIGH (3.3V) to power the peripheral (3.3V_P) power circuit. CLOSED by default. While enabled, this provides power to the \u00b5SD card and RGB LED. Open to disable the peripheral power circuit.</li> <li>SHLD - Nets the USB-C Shield pin to the board's ground plane. CLOSED by default. Open to isolate the shield pin from the board's ground.</li> <li>I2C - Three-way jumper pulls the I<sup>2</sup>C pins (IO4/SDA and IO5/SCL) to 3.3V through a pair of 2.2k\u03a9 resistors. CLOSED by default. Open the jumper to disable the pullups on these pins.</li> <li>BYP - Fuse bypass jumper. OPEN by default. Close to bypass the fuse on the VIN input.</li> </ul>"},{"location":"introduction/","title":"Introduction","text":"<p>The IoT RedBoard - RP2350 combines the RP2350 microcontroller with the Raspberry Pi Radio Module 2 to provide a powerful and versatile wireless development platform in the Arduino R4 form factor. In this guide we'll cover how to connect the IoT RedBoard - RP2350 to a computer and how to progam it three development environments: Raspberry Pi Pico SDK, MicroPython, or Arduino.</p> <p>This guide uses just the hardware present on the IoT RedBoard - RP2350 so in order to follow along with this tutorial you'll only need the following items:</p> <ul> <li>IoT RedBoard - RP2350</li> <li>USB-C Cable</li> </ul>"},{"location":"introduction/#topics-covered","title":"Topics Covered","text":"<p>This document contains three main sections: Quickstart Guide, Hardware and Software. </p> <p>The Quickstart Guide assumes a working knowledge of how to use a development board and the required software to program them for your project's needs. It covers a quick assembly and then jumps right into getting the necessary software packages installed to start uploading code in just a few short minutes.</p> <p>The Hardware page provides a detailed overview of the IoT RedBoard - RP2350 along with all the major components included on the board. Refer to this page for information on things like the RP2350, LEDs, pinout and solder jumpers.</p> <p>The Software pages are split into each supported development environment along with a page that goes into detail on what the UF2 bootloader is and how to use it on the IoT RedBoard - RP2350. Each software page gives instructions on how to download install its respective development environment, any necessary support packages including board definitions and, where necessary, library packages.</p>"},{"location":"introduction/#resources-and-support-documentation","title":"Resources and Support Documentation","text":"<p>You'll find the board design files (KiCad files &amp; schematic), relevant documentation (datasheets, white papers, etc.) and other helpful links in the Resources. Lastly, the Support section includes a Troubleshooting page that includes any helpful tips specific to this board as well as information on how to receive technical support from SparkFun.</p>"},{"location":"micropython/","title":"MicroPython","text":""},{"location":"micropython/#setup","title":"Setup","text":"<p>MicroPython is an application of the Python 3 language that runs on microcontrollers like the IoT RedBoard - RP2350 that allows you to easily interact with the board directly over a USB serial interface through either a command line interface or your preferred Python IDE such as Thonny. We'll do a quick overview of how to download MicroPython firmware on to the RedBoard IoT - RP2350 but for a complete overview of using MicroPython with this and other RP2350 boards, head over to Raspberry Pi's documentation by clicking the button below:</p> <p> Raspberry Pi MicroPython Docs </p>"},{"location":"micropython/#uf2-firmware","title":"UF2 Firmware","text":"<p>The SparkFun IoT RedBoard - RP2350 ships with MicroPython firmware pre-loaded so you do not need to download and install it in your board. If you need to update the firmware at any point, it is available in the main release of MicroPython here. Search for \"SparkFun IoT RedBoard - RP2350\" on the MicroPython downloads page for the correct firmware. This release does not include PSRAM support; if your project requires using PSRAM, you can find a Beta release MicroPython firmware available here.</p> <p>Download the latest release and then put the IoT RedBoard - RP2350 into UF2 bootloader mode and open the location the board appeared as a USB storage device (it should appear as \"RP2350\"). Next, drag and drop the UF2 file into the RP2350 folder and the board should reboot. After the board reboots, open up your preferred MicroPython IDE (or command line interface) and you can start interacting with your RedBoard IoT. Head over to the Quick Start guide for an example project that shows how to connect the board to a WiFi network, download data from a website and control the RGB LED.</p>"},{"location":"picosdk/","title":"Pico SDK","text":""},{"location":"picosdk/#pico-sdk-setup-documentation","title":"Pico SDK Setup &amp; Documentation","text":"<p>The Pico C SDK is a C/C++ development kit for Raspberry Pi microcontrollers including the RP2350. Click on the links below for complete documentation on installing and using the SDK.</p> <p> Pico C SDK Documentation </p> <p> Pico C SDK GitHub Repository </p>"},{"location":"picosdk/#redboard-iot-rp2350-board-definition","title":"RedBoard IoT - RP2350 Board Definition","text":"<p>When using the Pico SDK, make sure to use v2.1 or later and select <code>sparkfun_iotredboard_rp2350</code> for the board. We recommend using Microsoft VS Code with the Pico SDK Extension.</p>"},{"location":"quickstart/","title":"Quick Start","text":"<p>Welcome to the SparkFun IoT RedBoard - RP2350 Quick Start Guide showing how to set up and use the RM2 wireless chip to connect to a WiFi network, request and download data on the number and names of astronauts currently on the International Space Station. </p> <p>If you're not familiar with using development boards or the development environments covered in this guide, refer to the Hardware &amp; Software sections for a detailed overview of the board along with instructions on setting up and programming the IoT RedBoard - RP2350.</p>"},{"location":"quickstart/#basic-assembly","title":"Basic Assembly","text":"<p>Start by plugging the IoT RedBoard - RP2350 into your computer using a USB-C connector. </p> <p></p>"},{"location":"quickstart/#code-examples","title":"Code Examples","text":"<p>The following examples for both MicroPython and Arduino can be found in the Examples folder here in the GitHub repository. They demonstrate how to connect the IoT RedBoard - RP2350 to a WiFi network and then request and download data on the number of astronauts currently in space. They also include a visual indicator of the connection status using the RGB LED on the board like the photos below show:</p> <p></p>"},{"location":"quickstart/#micropython","title":"MicroPython","text":"<p>The IoT RedBoard - RP2350 ships with MicroPython firmware pre-loaded on the board. If needed, you can find the latest release of the firmware here. Open and run the Astronaut Network Demo in MicroPython by following these steps:</p> <ul> <li>Ensure you have a Python IDE like Thonny installed or use a Command Line Interface (CLI) if you prefer.</li> <li>Download and open the Astronaut Network Demo in your preferred Python IDE (or CLI).</li> <li>Adjust values for <code>WIFI_NETWORK</code> and <code>WIFI_PASSWORD</code> to your network's credentials.</li> <li>Run the example.</li> <li>Watch the serial print out for status updates along with the RGB cycling from red to blue and then green.</li> </ul> <p>Code to Note:</p> <ul> <li> <p>Required modules for the example: <pre><code>import network\nimport urequests\nimport time\nimport neopixel\nimport machine\n</code></pre></p> </li> <li> <p>LED control. Values are (R,G,B) 0-255. This sets the LED to full Red: <pre><code>led[0] = (255, 0, 0)\nled.write()\n</code></pre></p> </li> <li> <p>WiFi network connection. Enter values for network ID and password: <pre><code>wlan = network.WLAN(network.STA_IF)\nwlan.active(True)\nwlan.connect('WIFI_NETWORK', 'WIFI_PASSWORD')\n</code></pre> Serial print and download request for the list of astronauts currently in space:  <pre><code>print('Downloading list of astronauts currently in space...')\nastronauts = urequests.get(\"https://corquaid.github.io/international-space-station-APIs/JSON/people-in-space.json\").json()\n</code></pre></p> </li> <li> <p>Serial print of the number of and names of astronauts: <pre><code># Print the number of astronauts and their names\nnumber = astronauts['number']\nprint('There are', number, 'astronauts in space.')\nfor i in range(number):\n    print(i+1, astronauts['people'][i]['name'])\n</code></pre></p> </li> </ul>"},{"location":"quickstart/#arduino-ide","title":"Arduino IDE","text":"<p>Run the Astronaut Network Demo using the Arduino IDE by following these steps:</p> <ul> <li>Download and open the Astronaut Network Demo sketch in Arduino.</li> <li>Open the Board Manager and search for \"Arduino Pico\" to install the Arduino-Pico package.</li> <li>Open the Library Manager and search for \"FastLED\" to install the FastLED Arduino Library</li> <li>Adjust the WiFi variables (\"SSID\" and \"PASSWORD\") to your network's credentials.</li> <li>Select the board (SparkFun IoT RedBoard - RP2350) and Port and click the \"Upload\" button.</li> <li>On upload completion, open the Serial Monitor with the baud set to 115200 and watch the serial printout along with the RGB LED cycling from red to blue and then green.</li> </ul> <p>The example includes several serial prints to indicate success or failure. If the code fails at any point, refer to the associated serial print to help identify where it failed and why.</p> <p>Code to Note:</p> <ul> <li> <p>WiFi network variables. Adjust \"SSID\" and \"PASSWORD\" to your WiFi network's ID and password: <pre><code>#ifndef STASSID\n#define STASSID \"SSID\"\n#define STAPSK  \"PASSWORD\"\n#endif // !STASSID\n</code></pre></p> </li> <li> <p>WS2812 LED pin definition and settings: <pre><code>#define NUM_LEDS 1\n#define DATA_PIN PIN_NEOPIXEL\n#define LED_TYPE WS2812\n#define COLOR_ORDER GRB\n#define LED_BRIGHTNESS 30\n</code></pre></p> </li> <li> <p>Attempt to connect to WiFi network: <pre><code>multi.addAP(ssid, password);\n\n    if(multi.run() != WL_CONNECTED) {\n        Serial.println(F(\"Unable to connect to network, rebooting in 10 seconds...\"));\n        delay(10000);\n        rp2040.reboot();\n    }\n\n    Serial.println(F(\"Connected to network\"));\n    Serial.println(F(\"IP address: \"));\n    Serial.println(WiFi.localIP());\n</code></pre></p> </li> <li> <p>Send HTTP get request: <pre><code> client.println(F(\"GET /international-space-station-APIs/JSON/people-in-space.json HTTP/1.0\"));\n    client.println(F(\"Host: corquaid.github.io\"));\n    client.println(F(\"Connection: close\"));\n</code></pre></p> </li> <li> <p>Parse JSON request: <pre><code>JsonDocument doc;\n    DeserializationError error = deserializeJson(doc, client);\n    if(error) {\n        Serial.print(F(\"deserializeJson() failed: \"));\n        Serial.println(error.f_str());\n        client.stop();\n        return;\n    }\n</code></pre></p> </li> <li> <p>Print number &amp; names of astronauts in space: <pre><code>int numberOfPeople = doc[F(\"number\")];\n\n    Serial.print(F(\"There are \"));\n    Serial.print(numberOfPeople);\n    Serial.println(F(\" astronauts in space.\"));\n\n    for(JsonObject people_item : doc[F(\"people\")].as&lt;JsonArray&gt;()) {\n        int people_item_id = people_item[F(\"id\")];\n        const char* people_item_name = people_item[F(\"name\")];\n        Serial.print(people_item_id);\n        Serial.print(F(\": \"));\n        Serial.println(people_item_name);\n    }\n</code></pre></p> </li> </ul>"},{"location":"quickstart/#going-further","title":"Going Further","text":"<p>If you're looking for more detailed information on the design and components on this IoT Redboard, read on to the Hardware section below. Similarly, the Software tab includes detailed instructions on installing and using all supported development environments along with a few more examples for each IDE. Finally, the Resources section includes the board design files and datasheets for major components on the board.</p>"},{"location":"resources/","title":"Resources","text":"<p>For more information on the SparkFun IoT RedBoard - RP2350, check out the following resources:</p> <ul> <li>Schematic (PDF)</li> <li>KiCad Files (ZIP)</li> <li>Board Dimensions</li> <li>RP2350 Datasheet</li> <li>GitHub Repository</li> </ul>"},{"location":"uf2/","title":"UF2 Bootloader","text":"<p>The IoT RedBoard - RP2350 uses a UF2 bootloader for easy flashing/uploading of code to the board. The UF2 bootloader causes the board to show up on your computer as a USB storage device and does not require any drivers for Windows, Mac OSX, and Linux! This bootloader is used for uploading in both the Pico SDK and MicroPython development environments so let's take a brief look at how to enter bootload mode.</p>"},{"location":"uf2/#what-is-uf2","title":"What is UF2?","text":"<p>UF2 stands for USB Flashing Format, which was developed by Microsoft for PXT (now known as MakeCode) for flashing microcontrollers over the Mass Storage Class (MSC), just like a removable flash drive. The file format is unique, so unfortunately, you cannot simply drag and drop a compiled binary or hex file onto the board. Instead, the format of the file has extra information to tell the processor where the data goes, in addition to the data itself. For more information about UF2, you can read more from the MakeCode blog, as well as the UF2 file format specification.</p>"},{"location":"uf2/#entering-the-bootloader","title":"Entering the Bootloader","text":"<p>Putting the IoT RedBoard - RP2350 into bootloader mode only requires a couple of presses of the BOOT and RESET buttons. Enter the bootloader with the following steps:</p> <ul> <li>Press and hold down the BOOT button.</li> <li>While holding BOOT button, press and release the RESET button.</li> <li>Release the BOOT button</li> <li>Device should appear as a USB storage device called \"RP2350\"</li> </ul>"},{"location":"github/contribute/","title":"Contribute: Make an Augmentation!","text":"<p>Spot an improvement opportunity? Feel free to contribute to our open-source design and documentation. </p>"},{"location":"github/contribute/#improve-our-documentation","title":"Improve our Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>These pages are contained in the <code>docs</code> folder of the SparkFun IoT RedBoard repository.</li> </ul>"},{"location":"github/contribute/#submit-a-correction","title":"Submit a Correction","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your corrections or improvements to the markdown file.</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvements to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/contribute/#improve-our-hardware-design","title":"Improve our Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the  repository."},{"location":"github/contribute/#submit-a-design-enhancement","title":"Submit a Design Enhancement","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your design augmentation(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ol> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s) to verify that they are within our board design standards and meet our product design requirements.</li> <li> <p>If approved, we will flag these changes for our next board revision. Congrats! \ud83c\udf7b</p> <p>Info</p> <p>Even if your suggestion is accepted, these changes may not be immediately available for purchase. We may have to cycle through our current product inventory first.</p> </li> </ol> </li> </ol>"},{"location":"github/contribute/#contributors","title":"Contributors","text":"<p>Let's provide some recognition to the contributors for this project!</p> <p> </p>"},{"location":"github/file_issue/","title":"Did we make a mistake?","text":"<p>Spot something wrong? Please let us know. </p> <p>Need Help?</p> <p>If you need technical assistance or more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting. This Submit Issues page is not where users should seek assistance.</p> <p> SparkFun Technical Assistance Page </p> <p>If you can't find what you need there, the SparkFun Forums is a great place to search the product forums and ask questions.</p> <p>Account Registration Required</p> <p>For your first visit to our forum, you'll need to create a Forum Account to post questions.</p>"},{"location":"github/file_issue/#discrepancies-in-the-documentation","title":"Discrepancies in the Documentation","text":"<p>All of our documentation can be modified by you! Please help us make it better.</p> <ul> <li>The documentation files for these pages are contained in the <code>docs</code> folder of the  repository."},{"location":"github/file_issue/#spot-something-wrong","title":"\ud83d\udd0d Spot something wrong?","text":"<p>If a section of the documentation is incorrect, please open an issue and let us know.</p>"},{"location":"github/file_issue/#do-you-have-a-suggested-correction","title":"Do you have a suggested correction?","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your correction(s) or improvement(s) to the markdown file(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvement(s) to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/file_issue/#problems-in-the-hardware-design","title":"Problems in the Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the  repository."},{"location":"github/file_issue/#does-something-not-make-sense","title":"Does something not make sense? \ud83e\udd14","text":"<p>If part of the design is confusing, please open an issue and let us know.</p>"},{"location":"github/file_issue/#did-we-forget-to-include-an-important-function-of-the-board","title":"Did we forget to include an important function of the board? \ud83e\udd26","text":"<p>If part of the board's functionality is missing, please open an issue and file a feature request.</p> <p>Design Considerations</p> <p>Please keep in mind that we may intentionally exclude certain functions of the board to meet our product design requirements.</p> <ul> <li>For example, our Qwiic Micro boards are intended to fit on a small board layout and only use I<sup>2</sup>C communication; therefore, we may not have the SPI and interrupt pins available for users.</li> </ul>"},{"location":"github/file_issue/#do-you-wish-to-contribute-directly-to-improving-the-board-design","title":"Do you wish to contribute directly to improving the board design?","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your design augmentation(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ol> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s) to verify that they are within our board design standards and meet our product design requirements.</li> <li> <p>If approved, we will flag these changes for our next board revision. Congrats! \ud83c\udf7b</p> <p>Info</p> <p>Even if your suggestion is accepted, these changes may not be immediately available for purchase. We may have to cycle through our current product inventory first.</p> </li> </ol> </li> </ol>"},{"location":"javascript/","title":"javascript directory","text":"<p>This folder should contain the files for the custom javascript that is enabled in the product documentation</p>"},{"location":"stylesheet/REAMDE/","title":"stylesheet directory","text":"<p>This folder should contain the files used for the webpage customizations of the product documentation</p>"}]}